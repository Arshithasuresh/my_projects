# -*- coding: utf-8 -*-
"""mlmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DVykpbKuCi-b81YZGxDSexsrBzt98djO

## ***Loading data Set***
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
df = pd.read_csv ("https://raw.githubusercontent.com/info-aidtech/Iris-Flower-Classification-Dataset/main/IRIS.csv")
df

"""## ***Data Preparation***"""

y = df ["species"]
y

x = df.drop (["species"],axis = 1)
x

print (x.shape)
print (y.shape)

"""## ***Pre-processing the datasets***"""

# spliting the dataset into train set nd test set

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

x_train, x_test, y_train, y_test = train_test_split (x,y,test_size = 0.4, random_state = 5)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

x_train

y_train

x_test

y_test

"""## ***Visualization***"""

df.plot(kind= "scatter", x = 'sepal_length', y = 'petal_length')
plt.grid()

df.plot(kind= "scatter", x = 'sepal_width', y = 'petal_width')
plt.grid()

sns.pairplot(df, height = 2, hue = 'species')

"""# ***Decision Tree algorithm***"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.metrics import accuracy_score
# %pylab inline
# %matplotlib inline

"""Apply on the iris dataset"""

clf = DecisionTreeClassifier()
clf.fit(x_train,y_train)
# Predict Accuracy Score
y_pred = clf.predict(x_test)
print("Train data accuracy:",accuracy_score(y_true = y_train, y_pred=clf.predict(x_train)))
print("Test data accuracy:",accuracy_score(y_true = y_test, y_pred=y_pred))

"""## ***KNN Algorithm***"""

from sklearn.neighbors import KNeighborsClassifier

x_train, x_test, y_train, y_test = train_test_split( x, y, test_size = 0.4, random_state= 5)

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(x_train, y_train)

# Calculate the accuracy of the model
print("Accuracy:", knn.score(x_test, y_test))